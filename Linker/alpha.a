;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 27.03.2014
;Author  : PerTic@n
;Company : If You Like This Software,Buy It
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;// 1 Wire Bus interface functions
;//#include <1wire.h>
;
;// DS1820 Temperature Sensor functions
;#include <ds18b20.h>
;
;#include <stdio.h>
;#include <custom_menu.c>
;#include <n3310lcd.c>
;/**********************************************
;****************PCD8544 Driver*****************
;**********************************************
;
;for original NOKIA 3310 & alternative "chinese" version of display
;
;48x84 dots, 6x14 symbols
;
;**********************************************/
;
;//#define china 0	//если определено - работаем по алгоритмам "китайского" дисплея, иначе - оригинального
;
;//LCD Port & pinout setup
;#define LCD_PORT		    PORTB
;#define LCD_DDR        		DDRB
;
;#define LCD_DC_PIN        	    2  //любой пин порта
;#define LCD_CE_PIN              3  //любой пин порта
;#define SPI_MOSI_PIN            5  //должен быть соответствующий пин аппаратного SPI
;#define LCD_RST_PIN             4  //любой пин порта
;#define SPI_CLK_PIN             7  //должен быть соответствующий пин аппаратного SPI
;
;//***********************************************************
;//Настройки контроллера дисплея и пеерменные для работы с ним
;//***********************************************************
;
;unsigned char lcd_buf[14];		//текстовый буфер для вывода на LCD
;
;bit power_down = 0;			//power-down control: 0 - chip is active, 1 - chip is in PD-mode
;bit addressing = 0;			//направление адресации: 0 - горизонтальная, 1- вертикальная
;//bit instuct_set = 0;			//набор инструкций: 0 - стандартный, 1 - расширенный - в текущей версии не используется
;
;#ifdef china
;bit x_mirror = 0;			//зеркалирование по X: 0 - выкл., 1 - вкл.
;bit y_mirror = 0;			//зеркалирование по Y: 0 - выкл., 1 - вкл.
;bit SPI_invert = 0;			//порядок битов в SPI: 0 - MSB first, 1 - LSB first
;#endif
;
;//unsigned char set_y;			//адрес по У, 0..5 - в текущей версии не используется
;//unsigned char set_x;                 	//адрес по Х, 0..83 - в текущей версии не используется
;unsigned char temp_control = 3;  	//температурный коэффициент, 0..3
;unsigned char bias = 3;                 //смещение, 0..7
;unsigned char Vop = 80;			//рабочее напрядение LCD, 0..127 (определяет контрастность)
;unsigned char disp_config = 2;		//режим дисплея: 0 - blank, 1 - all on, 2 - normal, 3 - inverse
;
;#ifdef china
;unsigned char shift = 5;		//0..3F - сдвиг экрана вверх, в точках
;#endif
;
;#define PIXEL_OFF	0		//режимы отображения пикселя - используются в графических функциях
;#define PIXEL_ON	1
;#define PIXEL_XOR	2
;
;#define LCD_X_RES               84	//разрешение экрана
;#define LCD_Y_RES               48
;#define LCD_CACHE_SIZE          LCD_X_RES*LCD_Y_RES/8
;
;#define Cntr_X_RES              102    	//разрешение контроллера - предполагаемое - но работает))
;#define Cntr_Y_RES              64
;#define Cntr_buf_size           Cntr_X_RES*Cntr_Y_RES/8
;
;unsigned char  LcdCache [LCD_CACHE_SIZE];	//Cache buffer in SRAM 84*48 bits or 504 bytes
;unsigned int   LcdCacheIdx;              	//Cache index
;
;#define LCD_CMD         0
;#define LCD_DATA        1
;
;//***************************************************
;//****************Прототипы функций******************
;//***************************************************
;void LcdSend (unsigned char data, unsigned char cmd);    			//Sends data to display controller
;void LcdUpdate (void);   							//Copies the LCD cache into the device RAM
;void LcdClear (void);    							//Clears the display
;void LcdInit ( void );								//Настройка SPI и дисплея
;void LcdContrast (unsigned char contrast); 					//contrast -> Contrast value from 0x00 to 0x7F
;void LcdMode (unsigned char mode); 						//режимы дисплея: 0 - blank, 1 - all on, 2 - normal, 3 - inverse
;void LcdPwrMode (void);								//инвертирует состояние вкл/выкл дисплея
;void LcdImage (flash unsigned char *imageData);					//вывод изображения
;void LcdPixel (unsigned char x, unsigned char y, unsigned char mode);     	//Displays a pixel at given absolute (x, y) location, mode -> Off, On or Xor
;void LcdLine (int x1, int y1, int x2, int y2, unsigned char mode);  		//Draws a line between two points on the display
;void LcdCircle(char x, char y, char radius, unsigned char mode);		//рисуем круг с координатами центра и радиусом
;void LcdBar(int x1, int y1, int x2, int y2, unsigned char persent);		//рисуем батарейку и заполняем ее на %
;void LcdGotoXYFont (unsigned char x, unsigned char y);   			//Sets cursor location to xy location. Range: 1,1 .. 14,6
;void clean_lcd_buf (void);							//очистка текстового буфера
;void LcdChr (int ch);								//Displays a character at current cursor location and increment cursor location
;void LcdString (unsigned char x, unsigned char y);				//Displays a string at current cursor location
;void LcdChrBold (int ch);							//Печатает символ на текущем месте, большой и жирный)
;void LcdStringBold (unsigned char x, unsigned char y);				//Печатает большую и жирную строку
;void LcdChrBig (int ch);							//Печатает символ на текущем месте, большой
;void LcdStringBig (unsigned char x, unsigned char y);				//Печатает большую строку
;//***************************************************
;
;//ASCII
;flash char table[0x0500] =
;{
;0x00, 0x00, 0x00, 0x00, 0x00,// 00
;0x00, 0x00, 0x00, 0x02, 0x00,// 01
;0x01, 0x3C, 0x42, 0x42, 0x24,// 02 значек цельсия
;0x24, 0x92, 0xFF, 0x92, 0x24,// 03 ёлочка
;0x00, 0x80, 0xE0, 0x20, 0x3A,// 04 пасажир
;0x23, 0x13, 0x08, 0x64, 0x62,// 05
;0x36, 0x49, 0x55, 0x22, 0x50,// 06
;0x00, 0x05, 0x03, 0x00, 0x00,// 07
;0x00, 0x1C, 0x22, 0x41, 0x00,// 08
;0x00, 0x41, 0x22, 0x1C, 0x00,// 09
;0x14, 0x08, 0x3E, 0x08, 0x14,// 0A
;0x08, 0x08, 0x3E, 0x08, 0x08,// 0B
;0x00, 0x50, 0x30, 0x00, 0x00,// 0C
;0x08, 0x08, 0x08, 0x08, 0x08,// 0D
;0x00, 0x60, 0x60, 0x00, 0x00,// 0E
;0x20, 0x10, 0x08, 0x04, 0x02,// 0F
;0x00, 0x00, 0x00, 0x00, 0x00,// 10
;0x00, 0x00, 0x5F, 0x00, 0x00,// 11
;0x00, 0x07, 0x00, 0x07, 0x00,// 12
;0x14, 0x7F, 0x14, 0x7F, 0x14,// 13
;0x24, 0x2A, 0x7F, 0x2A, 0x12,// 14
;0x23, 0x13, 0x08, 0x64, 0x62,// 15
;0x36, 0x49, 0x55, 0x22, 0x50,// 16
;0x00, 0x05, 0x03, 0x00, 0x00,// 17
;0x00, 0x1C, 0x22, 0x41, 0x00,// 18
;0x00, 0x41, 0x22, 0x1C, 0x00,// 19
;0x14, 0x08, 0x3E, 0x08, 0x14,// 1A
;0x08, 0x08, 0x3E, 0x08, 0x08,// 1B
;0x00, 0x50, 0x30, 0x00, 0x00,// 1C
;0x08, 0x08, 0x08, 0x08, 0x08,// 1D
;0x00, 0x60, 0x60, 0x00, 0x00,// 1E
;0x20, 0x10, 0x08, 0x04, 0x02,// 1F
;0x00, 0x00, 0x00, 0x00, 0x00,// 20 space
;0x81, 0x00, 0x00, 0x00, 0x81,// 21 ! 0x00, 0x5F, 0x00, 0x00,
;0x00, 0x07, 0x00, 0x07, 0x00,// 22 "
;0x14, 0x7F, 0x14, 0x7F, 0x14,// 23 #
;0x24, 0x2A, 0x7F, 0x2A, 0x12,// 24 $
;0x23, 0x13, 0x08, 0x64, 0x62,// 25 %
;0x36, 0x49, 0x55, 0x22, 0x50,// 26 &
;0x00, 0x05, 0x03, 0x00, 0x00,// 27 '
;0x00, 0x1C, 0x22, 0x41, 0x00,// 28 (
;0x00, 0x41, 0x22, 0x1C, 0x00,// 29 )
;0x14, 0x08, 0x3E, 0x08, 0x14,// 2a *
;0x08, 0x08, 0x3E, 0x08, 0x08,// 2b +
;0x00, 0x50, 0x30, 0x00, 0x00,// 2c ,
;0x08, 0x08, 0x08, 0x08, 0x08,// 2d -
;0x00, 0x60, 0x60, 0x00, 0x00,// 2e .
;0x20, 0x10, 0x08, 0x04, 0x02,// 2f /
;0x3E, 0x51, 0x49, 0x45, 0x3E,// 30 0
;0x00, 0x42, 0x7F, 0x40, 0x00,// 31 1
;0x42, 0x61, 0x51, 0x49, 0x46,// 32 2
;0x21, 0x41, 0x45, 0x4B, 0x31,// 33 3
;0x18, 0x14, 0x12, 0x7F, 0x10,// 34 4
;0x27, 0x45, 0x45, 0x45, 0x39,// 35 5
;0x3C, 0x4A, 0x49, 0x49, 0x30,// 36 6
;0x01, 0x71, 0x09, 0x05, 0x03,// 37 7
;0x36, 0x49, 0x49, 0x49, 0x36,// 38 8
;0x06, 0x49, 0x49, 0x29, 0x1E,// 39 9
;0x00, 0x36, 0x36, 0x00, 0x00,// 3a :
;0x00, 0x56, 0x36, 0x00, 0x00,// 3b ;
;0x08, 0x14, 0x22, 0x41, 0x00,// 3c <
;0x14, 0x14, 0x14, 0x14, 0x14,// 3d =
;0x00, 0x41, 0x22, 0x14, 0x08,// 3e >
;0x02, 0x01, 0x51, 0x09, 0x06,// 3f ?
;0x32, 0x49, 0x79, 0x41, 0x3E,// 40 @
;0x7E, 0x11, 0x11, 0x11, 0x7E,// 41 A
;0x7F, 0x49, 0x49, 0x49, 0x36,// 42 B
;0x3E, 0x41, 0x41, 0x41, 0x22,// 43 C
;0x7F, 0x41, 0x41, 0x22, 0x1C,// 44 D
;0x7F, 0x49, 0x49, 0x49, 0x41,// 45 E
;0x7F, 0x09, 0x09, 0x09, 0x01,// 46 F
;0x3E, 0x41, 0x49, 0x49, 0x7A,// 47 G
;0x7F, 0x08, 0x08, 0x08, 0x7F,// 48 H
;0x00, 0x41, 0x7F, 0x41, 0x00,// 49 I
;0x20, 0x40, 0x41, 0x3F, 0x01,// 4a J
;0x7F, 0x08, 0x14, 0x22, 0x41,// 4b K
;0x7F, 0x40, 0x40, 0x40, 0x40,// 4c L
;0x7F, 0x02, 0x0C, 0x02, 0x7F,// 4d M
;0x7F, 0x04, 0x08, 0x10, 0x7F,// 4e N
;0x3E, 0x41, 0x41, 0x41, 0x3E,// 4f O
;0x7F, 0x09, 0x09, 0x09, 0x06,// 50 P
;0x3E, 0x41, 0x51, 0x21, 0x5E,// 51 Q
;0x7F, 0x09, 0x19, 0x29, 0x46,// 52 R
;0x46, 0x49, 0x49, 0x49, 0x31,// 53 S
;0x01, 0x01, 0x7F, 0x01, 0x01,// 54 T
;0x3F, 0x40, 0x40, 0x40, 0x3F,// 55 U
;0x1F, 0x20, 0x40, 0x20, 0x1F,// 56 V
;0x3F, 0x40, 0x38, 0x40, 0x3F,// 57 W
;0x63, 0x14, 0x08, 0x14, 0x63,// 58 X
;0x07, 0x08, 0x70, 0x08, 0x07,// 59 Y
;0x61, 0x51, 0x49, 0x45, 0x43,// 5a Z
;0x00, 0x7F, 0x41, 0x41, 0x00,// 5b [
;0x02, 0x04, 0x08, 0x10, 0x20,// 5c Yen Currency Sign
;0x00, 0x41, 0x41, 0x7F, 0x00,// 5d ]
;0x04, 0x02, 0x01, 0x02, 0x04,// 5e ^
;0x40, 0x40, 0x40, 0x40, 0x40,// 5f _
;0x00, 0x01, 0x02, 0x04, 0x00,// 60 `
;0x20, 0x54, 0x54, 0x54, 0x78,// 61 a
;0x7F, 0x48, 0x44, 0x44, 0x38,// 62 b
;0x38, 0x44, 0x44, 0x44, 0x20,// 63 c
;0x38, 0x44, 0x44, 0x48, 0x7F,// 64 d
;0x38, 0x54, 0x54, 0x54, 0x18,// 65 e
;0x08, 0x7E, 0x09, 0x01, 0x02,// 66 f
;0x0C, 0x52, 0x52, 0x52, 0x3E,// 67 g
;0x7F, 0x08, 0x04, 0x04, 0x78,// 68 h
;0x00, 0x44, 0x7D, 0x40, 0x00,// 69 i
;0x20, 0x40, 0x44, 0x3D, 0x00,// 6a j
;0x7F, 0x10, 0x28, 0x44, 0x00,// 6b k
;0x00, 0x41, 0x7F, 0x40, 0x00,// 6c l
;0x7C, 0x04, 0x18, 0x04, 0x78,// 6d m
;0x7C, 0x08, 0x04, 0x04, 0x78,// 6e n
;0x38, 0x44, 0x44, 0x44, 0x38,// 6f o
;0x7C, 0x14, 0x14, 0x14, 0x08,// 70 p
;0x08, 0x14, 0x14, 0x18, 0x7C,// 71 q
;0x7C, 0x08, 0x04, 0x04, 0x08,// 72 r
;0x48, 0x54, 0x54, 0x54, 0x20,// 73 s
;0x04, 0x3F, 0x44, 0x40, 0x20,// 74 t
;0x3C, 0x40, 0x40, 0x20, 0x7C,// 75 u
;0x1C, 0x20, 0x40, 0x20, 0x1C,// 76 v
;0x3C, 0x40, 0x30, 0x40, 0x3C,// 77 w
;0x44, 0x28, 0x10, 0x28, 0x44,// 78 x
;0x0C, 0x50, 0x50, 0x50, 0x3C,// 79 y
;0x44, 0x64, 0x54, 0x4C, 0x44,// 7a z
;0x00, 0x08, 0x36, 0x41, 0x00,// 7b <
;0x00, 0x00, 0x7F, 0x00, 0x00,// 7c |
;0x00, 0x41, 0x36, 0x08, 0x00,// 7d >
;0x10, 0x08, 0x08, 0x10, 0x08,// 7e Right Arrow ->
;0x78, 0x46, 0x41, 0x46, 0x78,// 7f Left Arrow <-
;0x00, 0x00, 0x00, 0x00, 0x00,// 80
;0x00, 0x00, 0x5F, 0x00, 0x00,// 81
;0x00, 0x07, 0x00, 0x07, 0x00,// 82
;0x14, 0x7F, 0x14, 0x7F, 0x14,// 83
;0x24, 0x2A, 0x7F, 0x2A, 0x12,// 84
;0x23, 0x13, 0x08, 0x64, 0x62,// 85
;0x36, 0x49, 0x55, 0x22, 0x50,// 86
;0x00, 0x05, 0x03, 0x00, 0x00,// 87
;0x00, 0x1C, 0x22, 0x41, 0x00,// 88
;0x00, 0x41, 0x22, 0x1C, 0x00,// 89
;0x14, 0x08, 0x3E, 0x08, 0x14,// 8A
;0x08, 0x08, 0x3E, 0x08, 0x08,// 8B
;0x00, 0x50, 0x30, 0x00, 0x00,// 8C
;0x08, 0x08, 0x08, 0x08, 0x08,// 8D
;0x00, 0x60, 0x60, 0x00, 0x00,// 8E
;0x20, 0x10, 0x08, 0x04, 0x02,// 8F
;0x00, 0x00, 0x00, 0x00, 0x00,// 90
;0x00, 0x00, 0x5F, 0x00, 0x00,// 91
;0x00, 0x07, 0x00, 0x07, 0x00,// 92
;0x14, 0x7F, 0x14, 0x7F, 0x14,// 93
;0x24, 0x2A, 0x7F, 0x2A, 0x12,// 94
;0x23, 0x13, 0x08, 0x64, 0x62,// 95
;0x36, 0x49, 0x55, 0x22, 0x50,// 96
;0x00, 0x05, 0x03, 0x00, 0x00,// 97
;0x00, 0x1C, 0x22, 0x41, 0x00,// 98
;0x00, 0x41, 0x22, 0x1C, 0x00,// 99
;0x14, 0x08, 0x3E, 0x08, 0x14,// 9A
;0x08, 0x08, 0x3E, 0x08, 0x08,// 9B
;0x00, 0x50, 0x30, 0x00, 0x00,// 9C
;0x08, 0x08, 0x08, 0x08, 0x08,// 9D
;0x00, 0x60, 0x60, 0x00, 0x00,// 9E
;0x20, 0x10, 0x08, 0x04, 0x02,// 9F
;0x00, 0x00, 0x00, 0x00, 0x00,// A0
;0x00, 0x00, 0x5F, 0x00, 0x00,// A1
;0x00, 0x07, 0x00, 0x07, 0x00,// A2
;0x14, 0x7F, 0x14, 0x7F, 0x14,// A3
;0x24, 0x2A, 0x7F, 0x2A, 0x12,// A4
;0x23, 0x13, 0x08, 0x64, 0x62,// A5
;0x36, 0x49, 0x55, 0x22, 0x50,// A6
;0x00, 0x05, 0x03, 0x00, 0x00,// A7
;0x00, 0x1C, 0x22, 0x41, 0x00,// A8
;0x00, 0x41, 0x22, 0x1C, 0x00,// A9
;0x14, 0x08, 0x3E, 0x08, 0x14,// AA
;0x08, 0x08, 0x3E, 0x08, 0x08,// AB
;0x00, 0x50, 0x30, 0x00, 0x00,// AC
;0x08, 0x08, 0x08, 0x08, 0x08,// AD
;0x00, 0x60, 0x60, 0x00, 0x00,// AE
;0x20, 0x10, 0x08, 0x04, 0x02,// AF
;0x3E, 0x51, 0x49, 0x45, 0x3E,// B0
;0x00, 0x42, 0x7F, 0x40, 0x00,// B1
;0x42, 0x61, 0x51, 0x49, 0x46,// B2
;0x21, 0x41, 0x45, 0x4B, 0x31,// B3
;0x18, 0x14, 0x12, 0x7F, 0x10,// B4
;0x27, 0x45, 0x45, 0x45, 0x39,// B5
;0x3C, 0x4A, 0x49, 0x49, 0x30,// B6
;0x01, 0x71, 0x09, 0x05, 0x03,// B7
;0x36, 0x49, 0x49, 0x49, 0x36,// B8
;0x06, 0x49, 0x49, 0x29, 0x1E,// B9
;0x00, 0x36, 0x36, 0x00, 0x00,// BA
;0x00, 0x56, 0x36, 0x00, 0x00,// BB
;0x08, 0x14, 0x22, 0x41, 0x00,// BC
;0x14, 0x14, 0x14, 0x14, 0x14,// BD
;0x00, 0x41, 0x22, 0x14, 0x08,// BE
;0x02, 0x01, 0x51, 0x09, 0x06,// BF
;0x7E, 0x11, 0x11, 0x11, 0x7E,// C0 ?
;0x7F, 0x49, 0x49, 0x49, 0x31,// C1 ?
;0x7F, 0x49, 0x49, 0x49, 0x36,// C2 ?
;0x7F, 0x01, 0x01, 0x01, 0x03,// C3 ?
;0x70, 0x29, 0x27, 0x21, 0x7F,// C4 ?
;0x7F, 0x49, 0x49, 0x49, 0x41,// C5 ?
;0x77, 0x08, 0x7F, 0x08, 0x77,// C6 ?
;0x41, 0x41, 0x41, 0x49, 0x76,// C7 ?
;0x7F, 0x10, 0x08, 0x04, 0x7F,// C8 ?
;0x7F, 0x10, 0x09, 0x04, 0x7F,// C9 ?
;0x7F, 0x08, 0x14, 0x22, 0x41,// CA ?
;0x20, 0x41, 0x3F, 0x01, 0x7F,// CB ?
;0x7F, 0x02, 0x0C, 0x02, 0x7F,// CC ?
;0x7F, 0x08, 0x08, 0x08, 0x7F,// CD ?
;0x3E, 0x41, 0x41, 0x41, 0x3E,// CE ?
;0x7F, 0x01, 0x01, 0x01, 0x7F,// CF ?
;0x7F, 0x09, 0x09, 0x09, 0x06,// D0 ?
;0x3E, 0x41, 0x41, 0x41, 0x22,// D1 ?
;0x01, 0x01, 0x7F, 0x01, 0x01,// D2 ?
;0x47, 0x28, 0x10, 0x08, 0x07,// D3 ?
;0x1E, 0x21, 0x7F, 0x21, 0x1E,// D4 ?
;0x63, 0x14, 0x08, 0x14, 0x63,// D5 ?
;0x3F, 0x20, 0x20, 0x20, 0x5F,// D6 ?
;0x07, 0x08, 0x08, 0x08, 0x7F,// D7 ?
;0x7F, 0x40, 0x7F, 0x40, 0x7F,// D8 ?
;0x3F, 0x20, 0x3F, 0x20, 0x5F,// D9 ?
;0x01, 0x7F, 0x48, 0x48, 0x30,// DA ?
;0x7F, 0x48, 0x30, 0x00, 0x7F,// DB ?
;0x00, 0x7F, 0x48, 0x48, 0x30,// DC ?
;0x41, 0x41, 0x41, 0x49, 0x3E,// DD ?
;0x7F, 0x08, 0x3E, 0x41, 0x3E,// DE ?
;0x46, 0x29, 0x19, 0x09, 0x7F,// DF ?
;0x20, 0x54, 0x54, 0x54, 0x78,// E0 ?
;0x3C, 0x4A, 0x4A, 0x49, 0x31,// E1 ?
;0x7C, 0x54, 0x54, 0x28, 0x00,// E2 ?
;0x7C, 0x04, 0x04, 0x04, 0x0C,// E3 ?
;0x72, 0x2A, 0x26, 0x22, 0x7E,// E4 ?
;0x38, 0x54, 0x54, 0x54, 0x18,// E5 ?
;0x6C, 0x10, 0x7C, 0x10, 0x6C,// E6 ?
;0x44, 0x44, 0x54, 0x54, 0x38,// E7 ?
;0x7C, 0x20, 0x10, 0x08, 0x7C,// E8 ?
;0x7C, 0x21, 0x12, 0x09, 0x7C,// E9 ?
;0x7C, 0x10, 0x28, 0x44, 0x00,// EA ?
;0x20, 0x44, 0x3C, 0x04, 0x7C,// EB ?
;0x7C, 0x08, 0x10, 0x08, 0x7C,// EC ?
;0x7C, 0x10, 0x10, 0x10, 0x7C,// ED ?
;0x38, 0x44, 0x44, 0x44, 0x38,// EE ?
;0x7C, 0x04, 0x04, 0x04, 0x7C,// EF ?
;0x7C, 0x14, 0x14, 0x14, 0x08,// F0 ?
;0x38, 0x44, 0x44, 0x44, 0x20,// F1 ?
;0x04, 0x04, 0x7C, 0x04, 0x04,// F2 ?
;0x44, 0x28, 0x10, 0x08, 0x04,// F3 ?
;0x08, 0x14, 0x7E, 0x14, 0x08,// F4 ?
;0x44, 0x28, 0x10, 0x28, 0x44,// F5 ?
;0x3C, 0x40, 0x40, 0x7C, 0x40,// F6 ?
;0x0C, 0x10, 0x10, 0x10, 0x7C,// F7 ?
;0x7C, 0x40, 0x7C, 0x40, 0x7C,// F8 ?
;0x3C, 0x20, 0x3C, 0x20, 0x7C,// F9 ?
;0x04, 0x7C, 0x50, 0x50, 0x20,// FA ?
;0x7C, 0x50, 0x20, 0x00, 0x7C,// FB ?
;0x00, 0x7C, 0x50, 0x50, 0x20,// FC ?
;0x28, 0x44, 0x44, 0x54, 0x38,// FD ?
;0x7C, 0x10, 0x38, 0x44, 0x38,// FE ?
;0x48, 0x54, 0x34, 0x14, 0x7C }; // FF
;
;void LcdSend (unsigned char data, unsigned char cmd)    //Sends data to display controller
; 0000 0023         {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;        LCD_PORT.LCD_CE_PIN = 0;                //Enable display controller (active low)
;PCODE: $0000000F VOL: 0
;	data -> Y+1
;	cmd -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;
;        if (cmd) LCD_PORT.LCD_DC_PIN = 1;	//выбираем команда или данные
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;                else LCD_PORT.LCD_DC_PIN = 0;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;        SPDR = data;                            //Send data to display controller
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;        while ( (SPSR & 0x80) != 0x80 );        //Wait until Tx register empty
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;        LCD_PORT.LCD_CE_PIN = 1;                //Disable display controller
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;        }
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;
;void LcdUpdate (void)   //Copies the LCD cache into the device RAM
;        {
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;        int i;
;	#ifdef china
;	char j;
;	#endif
;
;        LcdSend(0x80, LCD_CMD);		//команды установки указателя памяти дисплея на 0,0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;	i -> R16,R17
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;        LcdSend(0x40, LCD_CMD);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;
;        #ifdef china                    		//если китайский дисплей - грузим пустую строку
;		for (j = Cntr_X_RES; j>0; j--) LcdSend(0, LCD_DATA);
;	#endif
;
;        for (i = 0; i < LCD_CACHE_SIZE; i++)		//грузим данные
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;                {
;                LcdSend(LcdCache[i], LCD_DATA);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;		#ifdef china				//если дисплей китайский - догружаем каждую строку до размера его буфера
;		if (++j == LCD_X_RES)
;			{
;			for (j = (Cntr_X_RES-LCD_X_RES); j>0; j--) LcdSend(0, LCD_DATA);
;			j=0;
;			}
;		#endif
;                }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;        }
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;
;void LcdClear (void)    //Clears the display
;        {
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;        int i;
;
;	    for (i = 0; i < LCD_CACHE_SIZE; i++) LcdCache[i] = 0;	//забиваем всю память 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;	i -> R16,R17
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;        }
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;
;void LcdInit ( void )	//инициализация SPI и дисплея
;        {
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;        LCD_PORT.LCD_RST_PIN = 1;       //настроили порты ввода/вывода
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;        LCD_DDR.LCD_RST_PIN = LCD_DDR.LCD_DC_PIN = LCD_DDR.LCD_CE_PIN = LCD_DDR.SPI_MOSI_PIN = LCD_DDR.SPI_CLK_PIN = 1;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;        delay_ms(1);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;        SPCR = 0x50;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;        LCD_PORT.LCD_RST_PIN = 0;       //дернули ресет
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;        delay_ms(10);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;        LCD_PORT.LCD_RST_PIN = 1;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;                            //Enable SPI port: No interrupt, MSBit first, Master mode, CPOL->0, CPHA->0, Clk/4
;
;        LCD_PORT.LCD_CE_PIN = 1;        //Disable LCD controller
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;
;        LcdSend( 0b00100001, LCD_CMD ); 						//LCD Extended Commands
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;        LcdSend( 0b00000100+temp_control, LCD_CMD ); 					//Set Temp coefficent
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;        	#ifdef china
;        LcdSend( 0b00001000|SPI_invert<<3, LCD_CMD ); 					//порядок битов в SPI
;		#endif
;        LcdSend( 0b00010000+bias, LCD_CMD ); 						//LCD bias mode 1:48
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;        	#ifdef china
;        LcdSend( 0b01000000+shift, LCD_CMD ); 						//первая строка выше экрана, отображаем со второй
;		#endif
;	LcdSend( 0b10000000+Vop, LCD_CMD ); 						//Set LCD Vop (Contrast)
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;
;		#ifdef china
;	LcdSend( 0x20|x_mirror<<5|y_mirror<<4|power_down<<3, LCD_CMD );			//LCD Standard Commands
;        	#endif
;                #ifndef china
;        LcdSend( 0x20|power_down<<3|addressing<<2, LCD_CMD );				//LCD Standard Commands
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;                #endif
;        LcdSend( 0b00001000|((disp_config<<1|disp_config)&0b00000101), LCD_CMD ); 	//LCD mode
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;        LcdClear();
;PCODE: $000000AC VOL: 0
;        }
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;
;void LcdContrast (unsigned char contrast) 	//contrast -> Contrast value from 0x00 to 0x7F
;        {
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;        if (contrast > 0x7F) return;
;PCODE: $000000B1 VOL: 0
;	contrast -> Y+0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;        LcdSend( 0x21, LCD_CMD );               //LCD Extended Commands
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;        LcdSend( 0x80 | contrast, LCD_CMD );    //Set LCD Vop (Contrast)
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;        LcdSend( 0x20, LCD_CMD );               //LCD Standard Commands,Horizontal addressing mode
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;        }
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;
;void LcdMode (unsigned char mode) 		//режим дисплея: 0 - blank, 1 - all on, 2 - normal, 3 - inverse
;        {
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;        if (mode > 3) return;
;PCODE: $000000CA VOL: 0
;	mode -> Y+0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;        LcdSend( 0b00001000|((mode<<1|mode)&0b00000101), LCD_CMD ); 	//LCD mode
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;        }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;
;void LcdPwrMode (void) 				//инвертирует состояние вкл/выкл дисплея
;        {
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;        power_down = ~power_down;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;        LcdSend( 0x20|power_down<<3, LCD_CMD );
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;        }
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;
;void LcdImage (flash unsigned char *imageData)	//вывод изображения
;        {
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;        unsigned int i;
;
;        LcdSend(0x80, LCD_CMD);		//ставим указатель на 0,0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;	*imageData -> Y+2
;	i -> R16,R17
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;        LcdSend(0x40, LCD_CMD);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;        for (i = 0; i < LCD_CACHE_SIZE; i++) LcdCache[i] = imageData[i];	//грузим данные
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;
;void LcdPixel (unsigned char x, unsigned char y, unsigned char mode)     //Displays a pixel at given absolute (x, y) location, mode -> Off, On or Xor
;        {
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;        int index;
;        unsigned char offset, data;
;
;        if ( x > LCD_X_RES ) return;	//если передали в функцию муть - выходим
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;	x -> Y+6
;	y -> Y+5
;	mode -> Y+4
;	index -> R16,R17
;	offset -> R19
;	data -> R18
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;        if ( y > LCD_Y_RES ) return;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;
;        index = (((int)(y)/8)*84)+x;    //считаем номер байта в массиве памяти дисплея
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;        offset  = y-((y/8)*8);          //считаем номер бита в этом байте
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;
;        data = LcdCache[index];         //берем байт по наьденному индексу
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;
;        if ( mode == PIXEL_OFF ) data &= ( ~( 0x01 << offset ) );	//редактируем бит в этом байте
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;                else if ( mode == PIXEL_ON ) data |= ( 0x01 << offset );
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;                        else if ( mode  == PIXEL_XOR ) data ^= ( 0x01 << offset );
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;
;        LcdCache[index] = data;		//загружаем байт назад
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;        }
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;
;void LcdLine (int x1, int y1, int x2, int y2, unsigned char mode)  	//Draws a line between two points on the display - по Брезенхейму
;        {
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;        signed int dy = 0;
;        signed int dx = 0;
;        signed int stepx = 0;
;        signed int stepy = 0;
;        signed int fraction = 0;
;
;        if (x1>LCD_X_RES || x2>LCD_X_RES || y1>LCD_Y_RES || y2>LCD_Y_RES) return;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;	x1 -> Y+17
;	y1 -> Y+15
;	x2 -> Y+13
;	y2 -> Y+11
;	mode -> Y+10
;	dy -> R16,R17
;	dx -> R18,R19
;	stepx -> R20,R21
;	stepy -> Y+8
;	fraction -> Y+6
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;
;        dy = y2 - y1;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;        dx = x2 - x1;
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;        if (dy < 0)
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;                {
;                dy = -dy;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;                stepy = -1;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;                }
;                else stepy = 1;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;        if (dx < 0)
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;                {
;                dx = -dx;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;                stepx = -1;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;                }
;                else stepx = 1;
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;        dy <<= 1;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;        dx <<= 1;
;PCODE: $000001AC VOL: 0
;        LcdPixel(x1,y1,mode);
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;        if (dx > dy)
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;                {
;                fraction = dy - (dx >> 1);
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;                while (x1 != x2)
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;                        {
;                        if (fraction >= 0)
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;                                {
;                                y1 += stepy;
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;                                fraction -= dx;
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;                                }
;                        x1 += stepx;
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;                        fraction += dy;
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;                        LcdPixel(x1,y1,mode);
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;                        }
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;                }
;                else
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;                        {
;                        fraction = dx - (dy >> 1);
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;                        while (y1 != y2)
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;                                {
;                                if (fraction >= 0)
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;                                        {
;                                        x1 += stepx;
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;                                        fraction -= dy;
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;                                        }
;                                y1 += stepy;
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;                                fraction += dx;
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;                                LcdPixel(x1,y1,mode);
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;                                }
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;                        }
;PCODE: $00000204 VOL: 0
;        }
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;
;void LcdCircle(char x, char y, char radius, unsigned char mode)		//рисуем круг по координатам с радиусом - по Брезенхейму
;        {
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;        signed char xc = 0;
;        signed char yc = 0;
;        signed char p = 0;
;
;        if (x>LCD_X_RES || y>LCD_Y_RES) return;
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;	x -> Y+7
;	y -> Y+6
;	radius -> Y+5
;	mode -> Y+4
;	xc -> R17
;	yc -> R16
;	p -> R19
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;
;        yc=radius;
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;        p = 3 - (radius<<1);
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;        while (xc <= yc)
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;                {
;                LcdPixel(x + xc, y + yc, mode);
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;                LcdPixel(x + xc, y - yc, mode);
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;                LcdPixel(x - xc, y + yc, mode);
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;                LcdPixel(x - xc, y - yc, mode);
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;                LcdPixel(x + yc, y + xc, mode);
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;                LcdPixel(x + yc, y - xc, mode);
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;                LcdPixel(x - yc, y + xc, mode);
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;                LcdPixel(x - yc, y - xc, mode);
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;                if (p < 0) p += (xc++ << 2) + 6;
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;                        else p += ((xc++ - yc--)<<2) + 10;
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;                }
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;        }
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;
;void LcdBar(int x1, int y1, int x2, int y2, unsigned char persent)	//рисуем батарейку с заполнением в %
;        {
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;        unsigned char horizon_line,horizon_line2,i;
;        if(persent>100)return;
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;	x1 -> Y+11
;	y1 -> Y+9
;	x2 -> Y+7
;	y2 -> Y+5
;	persent -> Y+4
;	horizon_line -> R17
;	horizon_line2 -> R16
;	i -> R19
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;        //LcdLine(x1,y2,x2,y2,1);  //down
;        //LcdLine(x2,y1,x2,y2,1);  //right
;	    //LcdLine(x1,y1,x1,y2,1);  //left
;	    //LcdLine(x1,y1,x2,y1,1);  //up
;
;
;        horizon_line=persent*(y2-y1)/100;
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;        for(i=0;i<horizon_line;i++) LcdLine(x1,y2-i,x2,y2-i,1);
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;        for(i=horizon_line2;i>horizon_line;i--) LcdLine(x1,y2+1-i,x2,y2+1-i,0);
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;
;void LcdGotoXYFont (unsigned char x, unsigned char y)   //Sets cursor location to xy location. Range: 1,1 .. 14,6
;        {
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;        if (x <= 14 && y<= 6) LcdCacheIdx = ( (int)(y) - 1 ) * 84 + ( (int)(x) - 1 ) * 6;
;PCODE: $000002F1 VOL: 0
;	x -> Y+1
;	y -> Y+0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;        }
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;
;void clean_lcd_buf (void)	//очистка текстового буфера
;	{
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;	char i;
;
;	for (i=0; i<14; i++) lcd_buf[i] = 0;
;PCODE: $0000030F VOL: 0
;	i -> R17
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;
;void CharPrint (int ch, unsigned int IconSize, flash unsigned char *CharData, unsigned int inv, unsigned int space)
;    {
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;        unsigned char i;
;
;        for ( i = 0; i < IconSize; i++ )
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;	ch -> Y+9
;	IconSize -> Y+7
;	*CharData -> Y+5
;	inv -> Y+3
;	space -> Y+1
;	i -> R17
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;        {
;            LcdCache[LcdCacheIdx++] = inv ? ~(CharData[(ch*IconSize+i)]) : CharData[(ch*IconSize+i)];
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;        }
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;        if (space) LcdCache[LcdCacheIdx++] = 0x00;	//добавляем пробел между символами
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;    }
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;
;void LcdChr (int ch)	//Displays a character at current cursor location and increment cursor location
; 	{
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;     	CharPrint(ch,5,table,0,1);
;PCODE: $00000370 VOL: 0
;	ch -> Y+0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
; 	}
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;
;void LcdString (unsigned char x, unsigned char y)	//Displays a string at current cursor location
;	{
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;	unsigned char i;
;
;	if (x > 14 && y > 6) return;
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;	x -> Y+2
;	y -> Y+1
;	i -> R17
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;	LcdGotoXYFont (x, y);
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;	for ( i = 0; i < 15-x; i++ ) if (lcd_buf[i]) LcdChr (lcd_buf[i]);
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;	clean_lcd_buf();
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;	}
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;
;void LcdChrBold (int ch)	//Displays a bold character at current cursor location and increment cursor location
; 	{
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;     	unsigned char i;
;     	unsigned char a = 0, b = 0, c = 0;
;
;     	for ( i = 0; i < 5; i++ )
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;	ch -> Y+4
;	i -> R17
;	a -> R16
;	b -> R19
;	c -> R18
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;     	        {
;     	        c = table[(ch*5+i)];		//выделяем столбец из символа
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;
;     	        b =  (c & 0x01) * 3;            //"растягиваем" столбец на два байта
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;              	b |= (c & 0x02) * 6;
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;              	b |= (c & 0x04) * 12;
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;              	b |= (c & 0x08) * 24;
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;
;              	c >>= 4;
;PCODE: $000003F0 VOL: 0
;              	a =  (c & 0x01) * 3;
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;              	a |= (c & 0x02) * 6;
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;              	a |= (c & 0x04) * 12;
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;              	a |= (c & 0x08) * 24;
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;
;     	        LcdCache[LcdCacheIdx] = b;	//копируем байты в экранный буфер
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;     	        LcdCache[LcdCacheIdx+1] = b;    //дублируем для получения жирного шрифта
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;     	        LcdCache[LcdCacheIdx+84] = a;
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;     	        LcdCache[LcdCacheIdx+85] = a;
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;     	        LcdCacheIdx = LcdCacheIdx+2;
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;     	        }
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;
;     	LcdCache[LcdCacheIdx++] = 0x00;	//для пробела между символами
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;     	LcdCache[LcdCacheIdx++] = 0x00;
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
; 	}
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;
;void LcdStringBold (unsigned char x, unsigned char y)	//Displays a string at current cursor location
;	{
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;	unsigned char i;
;
;	if (x > 13 && y > 5) return;
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;	x -> Y+2
;	y -> Y+1
;	i -> R17
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;	LcdGotoXYFont (x, y);
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;	for ( i = 0; i < 14-x; i++ ) if (lcd_buf[i]) LcdChrBold (lcd_buf[i]);
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;	clean_lcd_buf();
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;	}
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;
;void LcdChrBig (int ch)	//Displays a character at current cursor location and increment cursor location
; 	{
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;     	unsigned char i;
;     	unsigned char a = 0, b = 0, c = 0;
;
;     	for ( i = 0; i < 5; i++ )
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;	ch -> Y+4
;	i -> R17
;	a -> R16
;	b -> R19
;	c -> R18
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;     	        {
;     	        c = table[(ch*5+i)];		//выделяем столбец из символа
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;
;     	        b =  (c & 0x01) * 3;            //"растягиваем" столбец на два байта
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;              	b |= (c & 0x02) * 6;
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;              	b |= (c & 0x04) * 12;
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;              	b |= (c & 0x08) * 24;
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;
;              	c >>= 4;
;PCODE: $000004A2 VOL: 0
;              	a =  (c & 0x01) * 3;
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;              	a |= (c & 0x02) * 6;
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;              	a |= (c & 0x04) * 12;
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;              	a |= (c & 0x08) * 24;
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;     	        LcdCache[LcdCacheIdx] = b;
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;     	        LcdCache[LcdCacheIdx+84] = a;
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;     	        LcdCacheIdx = LcdCacheIdx+1;
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;     	        }
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;
;     	LcdCache[LcdCacheIdx++] = 0x00;
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;     	}
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
;
;void LcdStringBig (unsigned char x, unsigned char y)	//Displays a string at current cursor location
;	{
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;	unsigned char i;
;
;	if (x > 14 && y > 5) return;
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;	x -> Y+2
;	y -> Y+1
;	i -> R17
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;	LcdGotoXYFont (x, y);
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;	for ( i = 0; i < 15-x; i++ ) if (lcd_buf[i]) LcdChrBig (lcd_buf[i]);
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;	clean_lcd_buf();
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;	}
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;
;
;
;//***************************************************
;#define IconSize 3   //не должен быть нулем! минимум 1
;#define TankCapacity 55 //объем бензобака
;#define MinEngineTemperature 0  //минимальная температура двигателя для отображения
;#define MaxEngineTemperature 150 //максимальная температура двигателя для отображения
;#define EngineTemperatureWarning 100 //температура при которой сработает предупреждение
;#define MaxBaseTemperature 99 //максимальная температура для отображения (в салоне/снаружи)
;#define MinBaseTemperature -50 //минимальная температура для отображения (в салоне/снаружи)
;#define OutTemperatureWarning 3 //температура при которой появится предупреждение о гололеде
;#define MinBatteryCurrent 100 //минимальное напряжение ниже которой появится предупреждение(Вольт*10)
;#define MaxBatteryCurrent 148 //максимальное предупреждение выше которой появится предупреждение(Вольт*10)
;#define BtnPort PINB.6  //порт на которой "висит" кнопка
;#define PulsesAmount 1   //кол-во импульсов с датчика скорости за 1м пройденного пути
;
;int _outTemperature,_internalTemperature,_engineTemperature;
;unsigned char outTempDevice=1, internalTempDevice=2, engineTempDevice=0;

	.DSEG
;
;// maximum number of DS1820 devices
;// connected to the 1 Wire bus
;#define MAX_DS18B20 3
;// number of DS1820 devices
;// connected to the 1 Wire bus
;unsigned char ds18b20_devices;
;// DS1820 devices ROM code storage area,
;// 9 bytes are used for each device
;// (see the w1_search function description in the help)
;unsigned char ds18b20_rom_codes[MAX_DS18B20][9];
;unsigned int _arrTemplate[] = {0,1,2,3,4};
;unsigned int _template;
;float _volt;
;unsigned int _btnCounter, _tempCounter;;
;unsigned int _arrsize = sizeof(_arrTemplate)/sizeof(_arrTemplate[0]);
;unsigned int _speed;
;unsigned int _tacho;
;unsigned int _speedTimerOverflow;
;unsigned int _tachoTimerOverflow;
;unsigned int _speedoPulsesOldValue;
;unsigned int _tachoPulsesOldValue;
;
;
;//ASCII
;flash char pic1[] =
;{
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0xFC,0x04,0x04,0x04,0xFC,
;0x08,0x08,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0xFC,
;0x04,0x04,0xFC,0x20,0x20,0x00,
;0x00,0xFF,0x00,0x00,0x00,0xFF,
;0x02,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x40,0x40,0x40,0xFF,
;0x00,0x00,0xFF,0x04,0x04,0x00,
;0x00,0xFF,0x00,0x00,0x00,0xFF,
;0x81,0x01,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x10,0x10,0x92,0xFF,
;0x00,0x00,0xFF,0x00,0x00,0x00,
;0x00,0x7F,0x40,0x40,0x40,0x7F,
;0x10,0x10,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x04,0x04,0x24,0xFF,
;0x00,0x00,0xFF,0x00,0x00,0x00,
;0x80,0xFF,0xF9,0xF9,0xF9,0xFF,
;0x90,0x22,0x3C,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x00,0x00,0x00,0x00,
;0x00,0x00,0x1C,0x3E,0x7F,0xF7,
;0x81,0xB7,0xFD,0x7F,0x3E,0x1C
;}; // FF
;
;
;flash char icon[] =
;{
;0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, //00 //test
;0xFF,0x81,0xFD,0x91,0xFD,0x81,0xB9,0xC5,0xC5,0xB9,0x81,0x85,0xFD,0x85,0x81,0xDD,0x81,0xFF,// 01//hot
;0x00,0xFE,0x82,0x93,0x93,0x92,0x82,0x82,0x82,0x82,0x92,0xBB,0x93,0x82,0xFE,0x00,0x00,0x00,// 02//bat
;0x00,0xFF,0x81,0xDD,0x81,0xFF,0x00,0x49,0x2A,0x1C,0x7F,0x1C,0x2A,0x49,0x00,0x00,0x00,0x00,// 03//ace
;0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 04//blank
;0x00,0x7E,0x04,0x18,0x20,0x7E,0x00,0x3C,0x42,0x42,0x42,0x3C,0x00,0x7E,0x12,0x32,0x4C,0x00,// 05//nor
;0x7E,0x04,0x08,0x04,0x7E,0x00,0x78,0x14,0x12,0x14,0x78,0x00,0x7E,0x40,0x40,0x40,0x00,0x00,// 06//mal
;0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x08,0x08,0x7E,0x00,0x7A,0x00,0x3C,0x42,// 07//hi
;0x52,0x34,0x00,0x7E,0x08,0x08,0x7E,0x00,0x00,0x5E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 08//gh
;0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x40,0x40,0x40,0x00,0x3C,0x42,0x42,0x42,// 09//lo
;0x3C,0x00,0x7E,0x20,0x10,0x20,0x7E,0x00,0x00,0x5E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 10//w!
;};
;
;void baseTemplate(unsigned int TankLevel, int EngineTemperature)
;{

	.CSEG
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;    float TemperatureProcent, TankProcent;
;
;    if (EngineTemperature > MaxEngineTemperature)   EngineTemperature =  MaxEngineTemperature;
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;	TankLevel -> Y+10
;	EngineTemperature -> Y+8
;	TemperatureProcent -> Y+4
;	TankProcent -> Y+0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;    if (EngineTemperature < MinEngineTemperature)   EngineTemperature =  MinEngineTemperature;
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;    sprintf (lcd_buf, "%3u", EngineTemperature);
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;    LcdString(12,1);
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
;    sprintf (lcd_buf, "%u", TankLevel);
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;    LcdString(1,1);
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;    TemperatureProcent = (long)EngineTemperature*100/MaxEngineTemperature;
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
;    LcdBar(78, 10, 79, 39, TemperatureProcent);
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
;    TankProcent = (long)TankLevel*100/TankCapacity;
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;    LcdBar(2, 10, 4, 37, TankProcent);
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
;}
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
;
;void tempDeviceInit(void)
;{
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;    unsigned int i;
;
;    ds18b20_devices=w1_search(0xf0,ds18b20_rom_codes);
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;	i -> R16,R17
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;
;    for (i=0; i<ds18b20_devices; i++)
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;    {
;        ds18b20_init(&ds18b20_rom_codes[i][0],-30,125,DS18B20_9BIT_RES);
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;    }
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
;}
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
;
;void getTemperature(unsigned int devices)
;{
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
;
;    switch (devices)
;PCODE: $00000597 VOL: 0
;	devices -> Y+0
;PCODE: $00000598 VOL: 0
;    {
;        case 3:
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
;            _internalTemperature =  ds18b20_temperature(&ds18b20_rom_codes[internalTempDevice][0]);
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
;        case 2:
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
;            _outTemperature =  ds18b20_temperature(&ds18b20_rom_codes[outTempDevice][0]);
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
;        case 1:
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;            _engineTemperature = ds18b20_temperature(&ds18b20_rom_codes[engineTempDevice][0]);
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;    };
;PCODE: $000005BE VOL: 0
;}
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
;
;void iconView (int ch, unsigned int inv)
;{
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
;    CharPrint(ch,6*IconSize,icon,inv,0);
;PCODE: $000005C4 VOL: 0
;	ch -> Y+2
;	inv -> Y+0
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
;}
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
;PCODE: $000005D2 VOL: 0
;
;void iconClear (void)
;{
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
;    LcdGotoXYFont(3,1);
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
;PCODE: $000005D7 VOL: 0
;PCODE: $000005D8 VOL: 0
;    CharPrint(4,6*IconSize,icon,0,0);
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
;PCODE: $000005DD VOL: 0
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
;    CharPrint(4,6*IconSize,icon,0,0);
;PCODE: $000005E4 VOL: 0
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
;PCODE: $000005E9 VOL: 0
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
;    CharPrint(4,6*IconSize,icon,0,0);
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
;PCODE: $000005F1 VOL: 0
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
;PCODE: $000005F7 VOL: 0
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
;}
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
;
;int tempProcessing(int temperature)
;{
;PCODE: $000005FC VOL: 0
;PCODE: $000005FD VOL: 0
;  if (temperature > MaxBaseTemperature) temperature = MaxBaseTemperature;
;PCODE: $000005FE VOL: 0
;	temperature -> Y+0
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
;PCODE: $00000601 VOL: 0
;PCODE: $00000602 VOL: 0
;PCODE: $00000603 VOL: 0
;  if (temperature < MinBaseTemperature) temperature = MinBaseTemperature;
;PCODE: $00000604 VOL: 0
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
;PCODE: $00000607 VOL: 0
;PCODE: $00000608 VOL: 0
;PCODE: $00000609 VOL: 0
;  return temperature;
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
;PCODE: $0000060C VOL: 0
;PCODE: $0000060D VOL: 0
;}
;PCODE: $0000060E VOL: 0
;
;void readADC(unsigned int adcValue)
;{
;PCODE: $0000060F VOL: 0
;PCODE: $00000610 VOL: 0
;  _volt = adcValue*0.14663;
;PCODE: $00000611 VOL: 0
;	adcValue -> Y+0
;PCODE: $00000612 VOL: 0
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
;PCODE: $00000615 VOL: 0
;PCODE: $00000616 VOL: 0
;}
;PCODE: $00000617 VOL: 0
;PCODE: $00000618 VOL: 0
;PCODE: $00000619 VOL: 0
;
;void checkBatState(void)
;{
;PCODE: $0000061A VOL: 0
;PCODE: $0000061B VOL: 0
;    unsigned int xPos;
;
;    if ((int)_volt < 130) xPos = 9;  //low
;PCODE: $0000061C VOL: 0
;PCODE: $0000061D VOL: 0
;	xPos -> R16,R17
;PCODE: $0000061E VOL: 0
;PCODE: $0000061F VOL: 0
;PCODE: $00000620 VOL: 0
;PCODE: $00000621 VOL: 0
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
;    if ((int)_volt < 145 && (int)_volt >= 130) xPos = 5; //normal
;PCODE: $00000624 VOL: 0
;PCODE: $00000625 VOL: 0
;PCODE: $00000626 VOL: 0
;PCODE: $00000627 VOL: 0
;PCODE: $00000628 VOL: 0
;PCODE: $00000629 VOL: 0
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
;PCODE: $0000062C VOL: 0
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
;PCODE: $00000630 VOL: 0
;    if ((int)_volt >= 145) xPos = 7;  //high
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
;PCODE: $00000633 VOL: 0
;PCODE: $00000634 VOL: 0
;PCODE: $00000635 VOL: 0
;PCODE: $00000636 VOL: 0
;PCODE: $00000637 VOL: 0
;    LcdGotoXYFont(5,5);
;PCODE: $00000638 VOL: 0
;PCODE: $00000639 VOL: 0
;PCODE: $0000063A VOL: 0
;PCODE: $0000063B VOL: 0
;PCODE: $0000063C VOL: 0
;    iconView(xPos,1);
;PCODE: $0000063D VOL: 0
;PCODE: $0000063E VOL: 0
;PCODE: $0000063F VOL: 0
;PCODE: $00000640 VOL: 0
;    LcdGotoXYFont(8,5);
;PCODE: $00000641 VOL: 0
;PCODE: $00000642 VOL: 0
;PCODE: $00000643 VOL: 0
;PCODE: $00000644 VOL: 0
;    iconView(xPos+1,1);
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
;PCODE: $00000647 VOL: 0
;PCODE: $00000648 VOL: 0
;PCODE: $00000649 VOL: 0
;PCODE: $0000064A VOL: 0
;}
;PCODE: $0000064B VOL: 0
;PCODE: $0000064C VOL: 0
;PCODE: $0000064D VOL: 0
;
;void template(unsigned int numTemplate)
;{
;PCODE: $0000064E VOL: 0
;PCODE: $0000064F VOL: 0
;    int internalTemperature;
;    int outTemperature;
;
;    switch (numTemplate)
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
;	numTemplate -> Y+4
;	internalTemperature -> R16,R17
;	outTemperature -> R18,R19
;PCODE: $00000652 VOL: 0
;    {
;        case 0: //temperature template
;PCODE: $00000653 VOL: 0
;PCODE: $00000654 VOL: 0
;            internalTemperature = tempProcessing(_internalTemperature);
;PCODE: $00000655 VOL: 0
;PCODE: $00000656 VOL: 0
;PCODE: $00000657 VOL: 0
;            outTemperature = tempProcessing(_outTemperature);
;PCODE: $00000658 VOL: 0
;PCODE: $00000659 VOL: 0
;PCODE: $0000065A VOL: 0
;            LcdGotoXYFont(3,2);
;PCODE: $0000065B VOL: 0
;PCODE: $0000065C VOL: 0
;PCODE: $0000065D VOL: 0
;PCODE: $0000065E VOL: 0
;	        LcdChrBold(0x03);
;PCODE: $0000065F VOL: 0
;PCODE: $00000660 VOL: 0
;PCODE: $00000661 VOL: 0
;            LcdGotoXYFont(3,4);
;PCODE: $00000662 VOL: 0
;PCODE: $00000663 VOL: 0
;PCODE: $00000664 VOL: 0
;PCODE: $00000665 VOL: 0
;	        LcdChrBold(0x04);
;PCODE: $00000666 VOL: 0
;PCODE: $00000667 VOL: 0
;PCODE: $00000668 VOL: 0
;            sprintf (lcd_buf, "%3i\x02", _engineTemperature);
;PCODE: $00000669 VOL: 0
;PCODE: $0000066A VOL: 0
;PCODE: $0000066B VOL: 0
;PCODE: $0000066C VOL: 0
;PCODE: $0000066D VOL: 0
;PCODE: $0000066E VOL: 0
;PCODE: $0000066F VOL: 0
;PCODE: $00000670 VOL: 0
;PCODE: $00000671 VOL: 0
;PCODE: $00000672 VOL: 0
;PCODE: $00000673 VOL: 0
;PCODE: $00000674 VOL: 0
;            LcdStringBold(5,2);
;PCODE: $00000675 VOL: 0
;PCODE: $00000676 VOL: 0
;PCODE: $00000677 VOL: 0
;PCODE: $00000678 VOL: 0
;            //sprintf (lcd_buf, "%3i\x02", internalTemperature);
;            sprintf (lcd_buf, "%3i\x02", outTemperature);
;PCODE: $00000679 VOL: 0
;PCODE: $0000067A VOL: 0
;PCODE: $0000067B VOL: 0
;PCODE: $0000067C VOL: 0
;PCODE: $0000067D VOL: 0
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
;PCODE: $00000680 VOL: 0
;PCODE: $00000681 VOL: 0
;PCODE: $00000682 VOL: 0
;PCODE: $00000683 VOL: 0
;PCODE: $00000684 VOL: 0
;            LcdStringBold(5,4);
;PCODE: $00000685 VOL: 0
;PCODE: $00000686 VOL: 0
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
;            sprintf (lcd_buf, "Thermo");
;PCODE: $00000689 VOL: 0
;PCODE: $0000068A VOL: 0
;PCODE: $0000068B VOL: 0
;PCODE: $0000068C VOL: 0
;PCODE: $0000068D VOL: 0
;PCODE: $0000068E VOL: 0
;PCODE: $0000068F VOL: 0
;PCODE: $00000690 VOL: 0
;PCODE: $00000691 VOL: 0
;	        LcdString(5,6);
;PCODE: $00000692 VOL: 0
;PCODE: $00000693 VOL: 0
;PCODE: $00000694 VOL: 0
;PCODE: $00000695 VOL: 0
;            break;
;PCODE: $00000696 VOL: 0
;        case 1:
;PCODE: $00000697 VOL: 0
;PCODE: $00000698 VOL: 0
;PCODE: $00000699 VOL: 0
;            sprintf (lcd_buf, "%2i.%iV", (int)_volt/10, (int)_volt%10);
;PCODE: $0000069A VOL: 0
;PCODE: $0000069B VOL: 0
;PCODE: $0000069C VOL: 0
;PCODE: $0000069D VOL: 0
;PCODE: $0000069E VOL: 0
;PCODE: $0000069F VOL: 0
;PCODE: $000006A0 VOL: 0
;PCODE: $000006A1 VOL: 0
;PCODE: $000006A2 VOL: 0
;PCODE: $000006A3 VOL: 0
;PCODE: $000006A4 VOL: 0
;PCODE: $000006A5 VOL: 0
;PCODE: $000006A6 VOL: 0
;PCODE: $000006A7 VOL: 0
;PCODE: $000006A8 VOL: 0
;PCODE: $000006A9 VOL: 0
;PCODE: $000006AA VOL: 0
;PCODE: $000006AB VOL: 0
;PCODE: $000006AC VOL: 0
;PCODE: $000006AD VOL: 0
;PCODE: $000006AE VOL: 0
;PCODE: $000006AF VOL: 0
;PCODE: $000006B0 VOL: 0
;            LcdStringBold(3,3);
;PCODE: $000006B1 VOL: 0
;PCODE: $000006B2 VOL: 0
;PCODE: $000006B3 VOL: 0
;PCODE: $000006B4 VOL: 0
;            checkBatState();
;PCODE: $000006B5 VOL: 0
;            sprintf (lcd_buf, "Voltmeter");
;PCODE: $000006B6 VOL: 0
;PCODE: $000006B7 VOL: 0
;PCODE: $000006B8 VOL: 0
;PCODE: $000006B9 VOL: 0
;PCODE: $000006BA VOL: 0
;PCODE: $000006BB VOL: 0
;PCODE: $000006BC VOL: 0
;PCODE: $000006BD VOL: 0
;PCODE: $000006BE VOL: 0
;	        LcdString(3,6);
;PCODE: $000006BF VOL: 0
;PCODE: $000006C0 VOL: 0
;PCODE: $000006C1 VOL: 0
;PCODE: $000006C2 VOL: 0
;            break;
;PCODE: $000006C3 VOL: 0
;        case 2:
;PCODE: $000006C4 VOL: 0
;PCODE: $000006C5 VOL: 0
;PCODE: $000006C6 VOL: 0
;            sprintf (lcd_buf, "%3i", _speed);
;PCODE: $000006C7 VOL: 0
;PCODE: $000006C8 VOL: 0
;PCODE: $000006C9 VOL: 0
;PCODE: $000006CA VOL: 0
;PCODE: $000006CB VOL: 0
;PCODE: $000006CC VOL: 0
;PCODE: $000006CD VOL: 0
;PCODE: $000006CE VOL: 0
;PCODE: $000006CF VOL: 0
;PCODE: $000006D0 VOL: 0
;PCODE: $000006D1 VOL: 0
;PCODE: $000006D2 VOL: 0
;            LcdStringBold(4,3);
;PCODE: $000006D3 VOL: 0
;PCODE: $000006D4 VOL: 0
;PCODE: $000006D5 VOL: 0
;PCODE: $000006D6 VOL: 0
;            sprintf (lcd_buf, "Km/h");
;PCODE: $000006D7 VOL: 0
;PCODE: $000006D8 VOL: 0
;PCODE: $000006D9 VOL: 0
;PCODE: $000006DA VOL: 0
;PCODE: $000006DB VOL: 0
;PCODE: $000006DC VOL: 0
;PCODE: $000006DD VOL: 0
;PCODE: $000006DE VOL: 0
;PCODE: $000006DF VOL: 0
;            LcdString(6,5);
;PCODE: $000006E0 VOL: 0
;PCODE: $000006E1 VOL: 0
;PCODE: $000006E2 VOL: 0
;PCODE: $000006E3 VOL: 0
;            sprintf (lcd_buf, "Speedo");
;PCODE: $000006E4 VOL: 0
;PCODE: $000006E5 VOL: 0
;PCODE: $000006E6 VOL: 0
;PCODE: $000006E7 VOL: 0
;PCODE: $000006E8 VOL: 0
;PCODE: $000006E9 VOL: 0
;PCODE: $000006EA VOL: 0
;PCODE: $000006EB VOL: 0
;PCODE: $000006EC VOL: 0
;	        LcdString(4,6);
;PCODE: $000006ED VOL: 0
;PCODE: $000006EE VOL: 0
;PCODE: $000006EF VOL: 0
;PCODE: $000006F0 VOL: 0
;            break;
;PCODE: $000006F1 VOL: 0
;        case 3:
;PCODE: $000006F2 VOL: 0
;PCODE: $000006F3 VOL: 0
;PCODE: $000006F4 VOL: 0
;            sprintf (lcd_buf, "Ебашит:");
;PCODE: $000006F5 VOL: 0
;PCODE: $000006F6 VOL: 0
;PCODE: $000006F7 VOL: 0
;PCODE: $000006F8 VOL: 0
;PCODE: $000006F9 VOL: 0
;PCODE: $000006FA VOL: 0
;PCODE: $000006FB VOL: 0
;PCODE: $000006FC VOL: 0
;PCODE: $000006FD VOL: 0
;            LcdString(5,2);
;PCODE: $000006FE VOL: 0
;PCODE: $000006FF VOL: 0
;PCODE: $00000700 VOL: 0
;PCODE: $00000701 VOL: 0
;            sprintf (lcd_buf, "%i", ds18b20_devices);
;PCODE: $00000702 VOL: 0
;PCODE: $00000703 VOL: 0
;PCODE: $00000704 VOL: 0
;PCODE: $00000705 VOL: 0
;PCODE: $00000706 VOL: 0
;PCODE: $00000707 VOL: 0
;PCODE: $00000708 VOL: 0
;PCODE: $00000709 VOL: 0
;PCODE: $0000070A VOL: 0
;PCODE: $0000070B VOL: 0
;PCODE: $0000070C VOL: 0
;PCODE: $0000070D VOL: 0
;            LcdString(8,3);
;PCODE: $0000070E VOL: 0
;PCODE: $0000070F VOL: 0
;PCODE: $00000710 VOL: 0
;PCODE: $00000711 VOL: 0
;            sprintf (lcd_buf, "датчика");
;PCODE: $00000712 VOL: 0
;PCODE: $00000713 VOL: 0
;PCODE: $00000714 VOL: 0
;PCODE: $00000715 VOL: 0
;PCODE: $00000716 VOL: 0
;PCODE: $00000717 VOL: 0
;PCODE: $00000718 VOL: 0
;PCODE: $00000719 VOL: 0
;PCODE: $0000071A VOL: 0
;            LcdString(5,4);
;PCODE: $0000071B VOL: 0
;PCODE: $0000071C VOL: 0
;PCODE: $0000071D VOL: 0
;PCODE: $0000071E VOL: 0
;            sprintf (lcd_buf, "проебанно:", 3 - ds18b20_devices);
;PCODE: $0000071F VOL: 0
;PCODE: $00000720 VOL: 0
;PCODE: $00000721 VOL: 0
;PCODE: $00000722 VOL: 0
;PCODE: $00000723 VOL: 0
;PCODE: $00000724 VOL: 0
;PCODE: $00000725 VOL: 0
;PCODE: $00000726 VOL: 0
;PCODE: $00000727 VOL: 0
;PCODE: $00000728 VOL: 0
;PCODE: $00000729 VOL: 0
;PCODE: $0000072A VOL: 0
;PCODE: $0000072B VOL: 0
;PCODE: $0000072C VOL: 0
;PCODE: $0000072D VOL: 0
;PCODE: $0000072E VOL: 0
;            LcdString(3,5);
;PCODE: $0000072F VOL: 0
;PCODE: $00000730 VOL: 0
;PCODE: $00000731 VOL: 0
;PCODE: $00000732 VOL: 0
;            sprintf (lcd_buf, "%i", 3 - ds18b20_devices);
;PCODE: $00000733 VOL: 0
;PCODE: $00000734 VOL: 0
;PCODE: $00000735 VOL: 0
;PCODE: $00000736 VOL: 0
;PCODE: $00000737 VOL: 0
;PCODE: $00000738 VOL: 0
;PCODE: $00000739 VOL: 0
;PCODE: $0000073A VOL: 0
;PCODE: $0000073B VOL: 0
;PCODE: $0000073C VOL: 0
;PCODE: $0000073D VOL: 0
;PCODE: $0000073E VOL: 0
;PCODE: $0000073F VOL: 0
;PCODE: $00000740 VOL: 0
;PCODE: $00000741 VOL: 0
;PCODE: $00000742 VOL: 0
;            LcdString(8,6);
;PCODE: $00000743 VOL: 0
;PCODE: $00000744 VOL: 0
;PCODE: $00000745 VOL: 0
;PCODE: $00000746 VOL: 0
;            break;
;PCODE: $00000747 VOL: 0
;        case 4:
;PCODE: $00000748 VOL: 0
;PCODE: $00000749 VOL: 0
;PCODE: $0000074A VOL: 0
;            sprintf (lcd_buf, "%i.%i", _tacho/1000, (_tacho%1000)/100);
;PCODE: $0000074B VOL: 0
;PCODE: $0000074C VOL: 0
;PCODE: $0000074D VOL: 0
;PCODE: $0000074E VOL: 0
;PCODE: $0000074F VOL: 0
;PCODE: $00000750 VOL: 0
;PCODE: $00000751 VOL: 0
;PCODE: $00000752 VOL: 0
;PCODE: $00000753 VOL: 0
;PCODE: $00000754 VOL: 0
;PCODE: $00000755 VOL: 0
;PCODE: $00000756 VOL: 0
;PCODE: $00000757 VOL: 0
;PCODE: $00000758 VOL: 0
;PCODE: $00000759 VOL: 0
;PCODE: $0000075A VOL: 0
;PCODE: $0000075B VOL: 0
;PCODE: $0000075C VOL: 0
;PCODE: $0000075D VOL: 0
;PCODE: $0000075E VOL: 0
;PCODE: $0000075F VOL: 0
;PCODE: $00000760 VOL: 0
;            LcdStringBold(5,3);
;PCODE: $00000761 VOL: 0
;PCODE: $00000762 VOL: 0
;PCODE: $00000763 VOL: 0
;PCODE: $00000764 VOL: 0
;            sprintf (lcd_buf, "rpm/m");
;PCODE: $00000765 VOL: 0
;PCODE: $00000766 VOL: 0
;PCODE: $00000767 VOL: 0
;PCODE: $00000768 VOL: 0
;PCODE: $00000769 VOL: 0
;PCODE: $0000076A VOL: 0
;PCODE: $0000076B VOL: 0
;PCODE: $0000076C VOL: 0
;PCODE: $0000076D VOL: 0
;            LcdString(5,5);
;PCODE: $0000076E VOL: 0
;PCODE: $0000076F VOL: 0
;PCODE: $00000770 VOL: 0
;PCODE: $00000771 VOL: 0
;            sprintf (lcd_buf, "Tacho");
;PCODE: $00000772 VOL: 0
;PCODE: $00000773 VOL: 0
;PCODE: $00000774 VOL: 0
;PCODE: $00000775 VOL: 0
;PCODE: $00000776 VOL: 0
;PCODE: $00000777 VOL: 0
;PCODE: $00000778 VOL: 0
;PCODE: $00000779 VOL: 0
;PCODE: $0000077A VOL: 0
;	        LcdString(5,6);
;PCODE: $0000077B VOL: 0
;PCODE: $0000077C VOL: 0
;PCODE: $0000077D VOL: 0
;PCODE: $0000077E VOL: 0
;            break;
;PCODE: $0000077F VOL: 0
;    }
;PCODE: $00000780 VOL: 0
;}
;PCODE: $00000781 VOL: 0
;PCODE: $00000782 VOL: 0
;PCODE: $00000783 VOL: 0
;PCODE: $00000784 VOL: 0
;
;void setTemplate(unsigned int numTemplate)
;{
;PCODE: $00000785 VOL: 0
;PCODE: $00000786 VOL: 0
;    _template = numTemplate;
;PCODE: $00000787 VOL: 0
;	numTemplate -> Y+0
;PCODE: $00000788 VOL: 0
;PCODE: $00000789 VOL: 0
;    LcdClear();
;PCODE: $0000078A VOL: 0
;    LcdImage(pic1);
;PCODE: $0000078B VOL: 0
;PCODE: $0000078C VOL: 0
;    //template(numTemplate);
;}
;PCODE: $0000078D VOL: 0
;PCODE: $0000078E VOL: 0
;PCODE: $0000078F VOL: 0
;
;void warning(void)
;{
;PCODE: $00000790 VOL: 0
;PCODE: $00000791 VOL: 0
;  iconClear();
;PCODE: $00000792 VOL: 0
;  if (_engineTemperature >= EngineTemperatureWarning)
;PCODE: $00000793 VOL: 0
;PCODE: $00000794 VOL: 0
;PCODE: $00000795 VOL: 0
;  {
;    LcdGotoXYFont(3,1);
;PCODE: $00000796 VOL: 0
;PCODE: $00000797 VOL: 0
;PCODE: $00000798 VOL: 0
;PCODE: $00000799 VOL: 0
;    iconView(1,0);
;PCODE: $0000079A VOL: 0
;PCODE: $0000079B VOL: 0
;PCODE: $0000079C VOL: 0
;PCODE: $0000079D VOL: 0
;PCODE: $0000079E VOL: 0
;  }
;
;  if (_outTemperature <= OutTemperatureWarning)
;PCODE: $0000079F VOL: 0
;PCODE: $000007A0 VOL: 0
;PCODE: $000007A1 VOL: 0
;PCODE: $000007A2 VOL: 0
;  {
;    LcdGotoXYFont(9,1);
;PCODE: $000007A3 VOL: 0
;PCODE: $000007A4 VOL: 0
;PCODE: $000007A5 VOL: 0
;PCODE: $000007A6 VOL: 0
;    iconView(3,0);
;PCODE: $000007A7 VOL: 0
;PCODE: $000007A8 VOL: 0
;PCODE: $000007A9 VOL: 0
;PCODE: $000007AA VOL: 0
;PCODE: $000007AB VOL: 0
;  }
;
;  if (_volt <= MinBatteryCurrent || _volt >= MaxBatteryCurrent)
;PCODE: $000007AC VOL: 0
;PCODE: $000007AD VOL: 0
;PCODE: $000007AE VOL: 0
;PCODE: $000007AF VOL: 0
;PCODE: $000007B0 VOL: 0
;PCODE: $000007B1 VOL: 0
;PCODE: $000007B2 VOL: 0
;PCODE: $000007B3 VOL: 0
;PCODE: $000007B4 VOL: 0
;PCODE: $000007B5 VOL: 0
;PCODE: $000007B6 VOL: 0
;  {
;    LcdGotoXYFont(6,1);
;PCODE: $000007B7 VOL: 0
;PCODE: $000007B8 VOL: 0
;PCODE: $000007B9 VOL: 0
;PCODE: $000007BA VOL: 0
;    iconView(2,0);
;PCODE: $000007BB VOL: 0
;PCODE: $000007BC VOL: 0
;PCODE: $000007BD VOL: 0
;PCODE: $000007BE VOL: 0
;PCODE: $000007BF VOL: 0
;  }
;
;
;}
;PCODE: $000007C0 VOL: 0
;PCODE: $000007C1 VOL: 0
;PCODE: $000007C2 VOL: 0
;
;void update(void)
;{
;PCODE: $000007C3 VOL: 0
;PCODE: $000007C4 VOL: 0
;    baseTemplate(43,_engineTemperature);
;PCODE: $000007C5 VOL: 0
;PCODE: $000007C6 VOL: 0
;PCODE: $000007C7 VOL: 0
;PCODE: $000007C8 VOL: 0
;    template(_template);
;PCODE: $000007C9 VOL: 0
;PCODE: $000007CA VOL: 0
;    warning();
;PCODE: $000007CB VOL: 0
;    LcdUpdate();
;PCODE: $000007CC VOL: 0
;}
;PCODE: $000007CD VOL: 0
;PCODE: $000007CE VOL: 0
;
;void nextTemplate(void)
;{
;PCODE: $000007CF VOL: 0
;PCODE: $000007D0 VOL: 0
;    setTemplate(_arrTemplate[_tempCounter]);
;PCODE: $000007D1 VOL: 0
;PCODE: $000007D2 VOL: 0
;PCODE: $000007D3 VOL: 0
;PCODE: $000007D4 VOL: 0
;PCODE: $000007D5 VOL: 0
;PCODE: $000007D6 VOL: 0
;PCODE: $000007D7 VOL: 0
;    _tempCounter++;
;PCODE: $000007D8 VOL: 0
;PCODE: $000007D9 VOL: 0
;PCODE: $000007DA VOL: 0
;PCODE: $000007DB VOL: 0
;    if (_tempCounter > _arrsize-1) _tempCounter = 0;
;PCODE: $000007DC VOL: 0
;PCODE: $000007DD VOL: 0
;PCODE: $000007DE VOL: 0
;PCODE: $000007DF VOL: 0
;PCODE: $000007E0 VOL: 0
;PCODE: $000007E1 VOL: 0
;PCODE: $000007E2 VOL: 0
;}
;PCODE: $000007E3 VOL: 0
;PCODE: $000007E4 VOL: 0
;PCODE: $000007E5 VOL: 0
;
;unsigned int getPulses (unsigned int *overflow, unsigned int *oldValue)
;{
;PCODE: $000007E6 VOL: 0
;PCODE: $000007E7 VOL: 0
;    unsigned int pulses, timerValue;
;    unsigned int tH_buff, tL_buff;
;
;
;
;    #asm("cli")
;PCODE: $000007E8 VOL: 0
;PCODE: $000007E9 VOL: 0
;PCODE: $000007EA VOL: 0
;	*overflow -> Y+10
;	*oldValue -> Y+8
;	pulses -> R16,R17
;	timerValue -> R18,R19
;	tH_buff -> R20,R21
;	tL_buff -> Y+6
;PCODE: $000007EB VOL: 0
	cli
;PCODE: $000007EC VOL: 0
;    tL_buff=TCNT1L;
;PCODE: $000007ED VOL: 0
;PCODE: $000007EE VOL: 0
;PCODE: $000007EF VOL: 0
;    tH_buff=TCNT1H;
;PCODE: $000007F0 VOL: 0
;PCODE: $000007F1 VOL: 0
;PCODE: $000007F2 VOL: 0
;    #asm("sei")
;PCODE: $000007F3 VOL: 0
	sei
;PCODE: $000007F4 VOL: 0
;    timerValue = (tH_buff*256)+tL_buff;
;PCODE: $000007F5 VOL: 0
;PCODE: $000007F6 VOL: 0
;PCODE: $000007F7 VOL: 0
;PCODE: $000007F8 VOL: 0
;PCODE: $000007F9 VOL: 0
;
;    if (overflow)
;PCODE: $000007FA VOL: 0
;PCODE: $000007FB VOL: 0
;PCODE: $000007FC VOL: 0
;    {
;        pulses = (65535*(*overflow) - (*oldValue)) + timerValue;
;PCODE: $000007FD VOL: 0
;PCODE: $000007FE VOL: 0
;PCODE: $000007FF VOL: 0
;PCODE: $00000800 VOL: 0
;PCODE: $00000801 VOL: 0
;PCODE: $00000802 VOL: 0
;PCODE: $00000803 VOL: 0
;PCODE: $00000804 VOL: 0
;PCODE: $00000805 VOL: 0
;PCODE: $00000806 VOL: 0
;PCODE: $00000807 VOL: 0
;PCODE: $00000808 VOL: 0
;        *overflow = 0;
;PCODE: $00000809 VOL: 0
;PCODE: $0000080A VOL: 0
;PCODE: $0000080B VOL: 0
;    }else{
;PCODE: $0000080C VOL: 0
;PCODE: $0000080D VOL: 0
;        pulses = timerValue - (*oldValue);
;PCODE: $0000080E VOL: 0
;PCODE: $0000080F VOL: 0
;PCODE: $00000810 VOL: 0
;PCODE: $00000811 VOL: 0
;PCODE: $00000812 VOL: 0
;PCODE: $00000813 VOL: 0
;    }
;PCODE: $00000814 VOL: 0
;    *oldValue = timerValue;
;PCODE: $00000815 VOL: 0
;PCODE: $00000816 VOL: 0
;    return pulses;
;PCODE: $00000817 VOL: 0
;PCODE: $00000818 VOL: 0
;PCODE: $00000819 VOL: 0
;PCODE: $0000081A VOL: 0
;}
;PCODE: $0000081B VOL: 0
;
;void speedo(unsigned int timerState)
;{
;PCODE: $0000081C VOL: 0
;PCODE: $0000081D VOL: 0
;
;    if (timerState && _speed > 0)
;PCODE: $0000081E VOL: 0
;	timerState -> Y+0
;PCODE: $0000081F VOL: 0
;PCODE: $00000820 VOL: 0
;PCODE: $00000821 VOL: 0
;PCODE: $00000822 VOL: 0
;PCODE: $00000823 VOL: 0
;PCODE: $00000824 VOL: 0
;PCODE: $00000825 VOL: 0
;PCODE: $00000826 VOL: 0
;PCODE: $00000827 VOL: 0
;PCODE: $00000828 VOL: 0
;    {
;        _speedTimerOverflow++;
;PCODE: $00000829 VOL: 0
;PCODE: $0000082A VOL: 0
;PCODE: $0000082B VOL: 0
;PCODE: $0000082C VOL: 0
;        return;
;PCODE: $0000082D VOL: 0
;PCODE: $0000082E VOL: 0
;    }
;
;    _speed = (((125000/getPulses(&_speedTimerOverflow, &_speedoPulsesOldValue))/PulsesAmount)*36)/10;
;PCODE: $0000082F VOL: 0
;PCODE: $00000830 VOL: 0
;PCODE: $00000831 VOL: 0
;PCODE: $00000832 VOL: 0
;PCODE: $00000833 VOL: 0
;PCODE: $00000834 VOL: 0
;PCODE: $00000835 VOL: 0
;PCODE: $00000836 VOL: 0
;PCODE: $00000837 VOL: 0
;PCODE: $00000838 VOL: 0
;PCODE: $00000839 VOL: 0
;PCODE: $0000083A VOL: 0
;PCODE: $0000083B VOL: 0
;PCODE: $0000083C VOL: 0
;}
;PCODE: $0000083D VOL: 0
;PCODE: $0000083E VOL: 0
;PCODE: $0000083F VOL: 0
;
;void tacho (unsigned int timerState)
;{
;PCODE: $00000840 VOL: 0
;PCODE: $00000841 VOL: 0
;    if (timerState && _tacho > 0)
;PCODE: $00000842 VOL: 0
;	timerState -> Y+0
;PCODE: $00000843 VOL: 0
;PCODE: $00000844 VOL: 0
;PCODE: $00000845 VOL: 0
;PCODE: $00000846 VOL: 0
;PCODE: $00000847 VOL: 0
;PCODE: $00000848 VOL: 0
;PCODE: $00000849 VOL: 0
;PCODE: $0000084A VOL: 0
;PCODE: $0000084B VOL: 0
;PCODE: $0000084C VOL: 0
;        {
;            _tachoTimerOverflow++;
;PCODE: $0000084D VOL: 0
;PCODE: $0000084E VOL: 0
;PCODE: $0000084F VOL: 0
;PCODE: $00000850 VOL: 0
;            return;
;PCODE: $00000851 VOL: 0
;PCODE: $00000852 VOL: 0
;        }
;
;    _tacho = ((125000/getPulses(&_tachoTimerOverflow, &_tachoPulsesOldValue))*60)/4;
;PCODE: $00000853 VOL: 0
;PCODE: $00000854 VOL: 0
;PCODE: $00000855 VOL: 0
;PCODE: $00000856 VOL: 0
;PCODE: $00000857 VOL: 0
;PCODE: $00000858 VOL: 0
;PCODE: $00000859 VOL: 0
;PCODE: $0000085A VOL: 0
;PCODE: $0000085B VOL: 0
;PCODE: $0000085C VOL: 0
;PCODE: $0000085D VOL: 0
;PCODE: $0000085E VOL: 0
;PCODE: $0000085F VOL: 0
;PCODE: $00000860 VOL: 0
;}
;PCODE: $00000861 VOL: 0
;PCODE: $00000862 VOL: 0
;PCODE: $00000863 VOL: 0
;
;void buttonCtrl (void)
;{
;PCODE: $00000864 VOL: 0
;PCODE: $00000865 VOL: 0
;    if (BtnPort == 0)
;PCODE: $00000866 VOL: 0
;PCODE: $00000867 VOL: 0
;PCODE: $00000868 VOL: 0
;    {
;        delay_ms(20);
;PCODE: $00000869 VOL: 0
;PCODE: $0000086A VOL: 0
;PCODE: $0000086B VOL: 0
;        _btnCounter++;
;PCODE: $0000086C VOL: 0
;PCODE: $0000086D VOL: 0
;PCODE: $0000086E VOL: 0
;PCODE: $0000086F VOL: 0
;    }else{
;PCODE: $00000870 VOL: 0
;PCODE: $00000871 VOL: 0
;        if(_btnCounter>0){
;PCODE: $00000872 VOL: 0
;PCODE: $00000873 VOL: 0
;PCODE: $00000874 VOL: 0
;            nextTemplate();
;PCODE: $00000875 VOL: 0
;            _btnCounter = 0;
;PCODE: $00000876 VOL: 0
;PCODE: $00000877 VOL: 0
;        }
;    }
;PCODE: $00000878 VOL: 0
;PCODE: $00000879 VOL: 0
;}
;PCODE: $0000087A VOL: 0
;PCODE: $0000087B VOL: 0
;
;
;#define tempUpdateTime 5//в секундах
;#define timerOverflow 1
;#define timerNormal 0
;
;unsigned int i;
;unsigned int pulsesCounter;
;
;#define ADC_VREF_TYPE 0xC0
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0030 {
;PCODE: $0000087C VOL: 0
;PCODE: $0000087D VOL: 0
; 0000 0031 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $0000087E VOL: 0
;	adc_input -> Y+0
;PCODE: $0000087F VOL: 0
;PCODE: $00000880 VOL: 0
;PCODE: $00000881 VOL: 0
; 0000 0032 // Delay needed for the stabilization of the ADC input voltage
; 0000 0033 delay_us(10);
;PCODE: $00000882 VOL: 0
; 0000 0034 // Start the AD conversion
; 0000 0035 ADCSRA|=0x40;
;PCODE: $00000883 VOL: 0
;PCODE: $00000884 VOL: 0
; 0000 0036 // Wait for the AD conversion to complete
; 0000 0037 while ((ADCSRA & 0x10)==0);
;PCODE: $00000885 VOL: 0
;PCODE: $00000886 VOL: 0
;PCODE: $00000887 VOL: 0
;PCODE: $00000888 VOL: 0
;PCODE: $00000889 VOL: 0
;PCODE: $0000088A VOL: 0
; 0000 0038 ADCSRA|=0x10;
;PCODE: $0000088B VOL: 0
;PCODE: $0000088C VOL: 0
; 0000 0039 return ADCW;
;PCODE: $0000088D VOL: 0
;PCODE: $0000088E VOL: 0
;PCODE: $0000088F VOL: 0
; 0000 003A }
;PCODE: $00000890 VOL: 0
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 003E {
;PCODE: $00000891 VOL: 0
;PCODE: $00000892 VOL: 0
; 0000 003F // Place your code here
; 0000 0040 speedo(timerNormal);
;PCODE: $00000893 VOL: 0
;PCODE: $00000894 VOL: 0
;PCODE: $00000895 VOL: 0
; 0000 0041 }
;PCODE: $00000896 VOL: 0
;PCODE: $00000897 VOL: 0
;PCODE: $00000898 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0045 {
;PCODE: $00000899 VOL: 0
;PCODE: $0000089A VOL: 0
; 0000 0046 // Place your code here
; 0000 0047 tacho(timerNormal);
;PCODE: $0000089B VOL: 0
;PCODE: $0000089C VOL: 0
;PCODE: $0000089D VOL: 0
; 0000 0048 }
;PCODE: $0000089E VOL: 0
;PCODE: $0000089F VOL: 0
;PCODE: $000008A0 VOL: 0
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 004C {
;PCODE: $000008A1 VOL: 0
;PCODE: $000008A2 VOL: 0
; 0000 004D // Place your code here
; 0000 004E pulsesCounter++;
;PCODE: $000008A3 VOL: 0
;PCODE: $000008A4 VOL: 0
;PCODE: $000008A5 VOL: 0
;PCODE: $000008A6 VOL: 0
; 0000 004F if (pulsesCounter == 15) {
;PCODE: $000008A7 VOL: 0
;PCODE: $000008A8 VOL: 0
;PCODE: $000008A9 VOL: 0
; 0000 0050     pulsesCounter = 0;
;PCODE: $000008AA VOL: 0
;PCODE: $000008AB VOL: 0
; 0000 0051 
; 0000 0052     update();
;PCODE: $000008AC VOL: 0
; 0000 0053     i++;
;PCODE: $000008AD VOL: 0
;PCODE: $000008AE VOL: 0
;PCODE: $000008AF VOL: 0
;PCODE: $000008B0 VOL: 0
; 0000 0054 
; 0000 0055         if (i >= tempUpdateTime*2)
;PCODE: $000008B1 VOL: 0
;PCODE: $000008B2 VOL: 0
;PCODE: $000008B3 VOL: 0
; 0000 0056         {
; 0000 0057             i = 0;
;PCODE: $000008B4 VOL: 0
;PCODE: $000008B5 VOL: 0
; 0000 0058             getTemperature(ds18b20_devices);
;PCODE: $000008B6 VOL: 0
;PCODE: $000008B7 VOL: 0
;PCODE: $000008B8 VOL: 0
; 0000 0059             readADC(read_adc(0));
;PCODE: $000008B9 VOL: 0
;PCODE: $000008BA VOL: 0
;PCODE: $000008BB VOL: 0
;PCODE: $000008BC VOL: 0
; 0000 005A         }
; 0000 005B 
; 0000 005C }
;PCODE: $000008BD VOL: 0
; 0000 005D }
;PCODE: $000008BE VOL: 0
;PCODE: $000008BF VOL: 0
;PCODE: $000008C0 VOL: 0
;PCODE: $000008C1 VOL: 0
;
;// Timer1 output compare A interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0061 {
;PCODE: $000008C2 VOL: 0
;PCODE: $000008C3 VOL: 0
; 0000 0062 // Place your code here
; 0000 0063 PORTC.1 = !PORTC.1;
;PCODE: $000008C4 VOL: 0
;PCODE: $000008C5 VOL: 0
;PCODE: $000008C6 VOL: 0
;PCODE: $000008C7 VOL: 0
;PCODE: $000008C8 VOL: 0
;PCODE: $000008C9 VOL: 0
;PCODE: $000008CA VOL: 0
;PCODE: $000008CB VOL: 0
;PCODE: $000008CC VOL: 0
;PCODE: $000008CD VOL: 0
; 0000 0064 speedo(timerOverflow);
;PCODE: $000008CE VOL: 0
;PCODE: $000008CF VOL: 0
;PCODE: $000008D0 VOL: 0
; 0000 0065 tacho(timerOverflow);
;PCODE: $000008D1 VOL: 0
;PCODE: $000008D2 VOL: 0
;PCODE: $000008D3 VOL: 0
; 0000 0066 }
;PCODE: $000008D4 VOL: 0
;PCODE: $000008D5 VOL: 0
;PCODE: $000008D6 VOL: 0
;
;// Timer2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 006A {
;PCODE: $000008D7 VOL: 0
;PCODE: $000008D8 VOL: 0
; 0000 006B // Place your code here
; 0000 006C 
; 0000 006D }
;PCODE: $000008D9 VOL: 0
;PCODE: $000008DA VOL: 0
;PCODE: $000008DB VOL: 0
;
;
;void main(void)
; 0000 0071 {
;PCODE: $000008DC VOL: 0
; 0000 0072 // Declare your local variables here
; 0000 0073 
; 0000 0074 // Input/Output Ports initialization
; 0000 0075 // Port A initialization
; 0000 0076 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0077 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0078 PORTA=0x00;
;PCODE: $000008DD VOL: 0
;PCODE: $000008DE VOL: 0
; 0000 0079 DDRA=0x00;
;PCODE: $000008DF VOL: 0
;PCODE: $000008E0 VOL: 0
; 0000 007A 
; 0000 007B // Port B initialization
; 0000 007C // Func7=In Func6=Out Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 007D // State7=T State6=0 State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 007E PORTB=0x00;
;PCODE: $000008E1 VOL: 0
;PCODE: $000008E2 VOL: 0
; 0000 007F DDRB=0x40;
;PCODE: $000008E3 VOL: 0
;PCODE: $000008E4 VOL: 0
; 0000 0080 
; 0000 0081 // Port C initialization
; 0000 0082 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0083 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0084 PORTC=0x00;
;PCODE: $000008E5 VOL: 0
;PCODE: $000008E6 VOL: 0
; 0000 0085 DDRC=0x02;
;PCODE: $000008E7 VOL: 0
;PCODE: $000008E8 VOL: 0
; 0000 0086 
; 0000 0087 // Port D initialization
; 0000 0088 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0089 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 008A PORTD=0x00;
;PCODE: $000008E9 VOL: 0
;PCODE: $000008EA VOL: 0
; 0000 008B DDRD=0x00;
;PCODE: $000008EB VOL: 0
;PCODE: $000008EC VOL: 0
; 0000 008C 
; 0000 008D // Timer/Counter 0 initialization
; 0000 008E // Clock source: System Clock
; 0000 008F // Clock value: 7,813 kHz
; 0000 0090 // Mode: Normal top=0xFF
; 0000 0091 // OC0 output: Disconnected
; 0000 0092 TCCR0=0x05;
;PCODE: $000008ED VOL: 0
;PCODE: $000008EE VOL: 0
; 0000 0093 TCNT0=0x00;
;PCODE: $000008EF VOL: 0
;PCODE: $000008F0 VOL: 0
; 0000 0094 OCR0=0x00;
;PCODE: $000008F1 VOL: 0
;PCODE: $000008F2 VOL: 0
; 0000 0095 
; 0000 0096 // Timer/Counter 1 initialization
; 0000 0097 // Clock source: System Clock
; 0000 0098 // Clock value: 7,813 kHz
; 0000 0099 // Mode: Normal top=0xFFFF
; 0000 009A // OC1A output: Discon.
; 0000 009B // OC1B output: Discon.
; 0000 009C // Noise Canceler: Off
; 0000 009D // Input Capture on Falling Edge
; 0000 009E // Timer1 Overflow Interrupt: Off
; 0000 009F // Input Capture Interrupt: Off
; 0000 00A0 // Compare A Match Interrupt: On
; 0000 00A1 // Compare B Match Interrupt: Off
; 0000 00A2 TCCR1A=0x00;
;PCODE: $000008F3 VOL: 0
;PCODE: $000008F4 VOL: 0
; 0000 00A3 TCCR1B=0x03;
;PCODE: $000008F5 VOL: 0
;PCODE: $000008F6 VOL: 0
; 0000 00A4 TCNT1H=0x00;
;PCODE: $000008F7 VOL: 0
;PCODE: $000008F8 VOL: 0
; 0000 00A5 TCNT1L=0x00;
;PCODE: $000008F9 VOL: 0
;PCODE: $000008FA VOL: 0
; 0000 00A6 ICR1H=0x00;
;PCODE: $000008FB VOL: 0
;PCODE: $000008FC VOL: 0
; 0000 00A7 ICR1L=0x00;
;PCODE: $000008FD VOL: 0
;PCODE: $000008FE VOL: 0
; 0000 00A8 OCR1AH=0x00;
;PCODE: $000008FF VOL: 0
;PCODE: $00000900 VOL: 0
; 0000 00A9 OCR1AL=0x00;
;PCODE: $00000901 VOL: 0
;PCODE: $00000902 VOL: 0
; 0000 00AA OCR1BH=0x00;
;PCODE: $00000903 VOL: 0
;PCODE: $00000904 VOL: 0
; 0000 00AB OCR1BL=0x00;
;PCODE: $00000905 VOL: 0
;PCODE: $00000906 VOL: 0
; 0000 00AC 
; 0000 00AD // Timer/Counter 2 initialization
; 0000 00AE // Clock source: System Clock
; 0000 00AF // Clock value: 125,000 kHz
; 0000 00B0 // Mode: Normal top=0xFF
; 0000 00B1 // OC2 output: Disconnected
; 0000 00B2 ASSR=0x00;
;PCODE: $00000907 VOL: 0
;PCODE: $00000908 VOL: 0
; 0000 00B3 TCCR2=0x04;
;PCODE: $00000909 VOL: 0
;PCODE: $0000090A VOL: 0
; 0000 00B4 TCNT2=0x00;
;PCODE: $0000090B VOL: 0
;PCODE: $0000090C VOL: 0
; 0000 00B5 OCR2=0x00;
;PCODE: $0000090D VOL: 0
;PCODE: $0000090E VOL: 0
; 0000 00B6 
; 0000 00B7 // External Interrupt(s) initialization
; 0000 00B8 // INT0: On
; 0000 00B9 // INT0 Mode: Falling Edge
; 0000 00BA // INT1: On
; 0000 00BB // INT1 Mode: Rising Edge
; 0000 00BC // INT2: Off
; 0000 00BD GICR|=0xC0;
;PCODE: $0000090F VOL: 0
;PCODE: $00000910 VOL: 0
;PCODE: $00000911 VOL: 0
; 0000 00BE MCUCR=0x0E;
;PCODE: $00000912 VOL: 0
;PCODE: $00000913 VOL: 0
; 0000 00BF MCUCSR=0x00;
;PCODE: $00000914 VOL: 0
;PCODE: $00000915 VOL: 0
; 0000 00C0 GIFR=0xC0;
;PCODE: $00000916 VOL: 0
;PCODE: $00000917 VOL: 0
; 0000 00C1 
; 0000 00C2 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00C3 TIMSK=0x45;
;PCODE: $00000918 VOL: 0
;PCODE: $00000919 VOL: 0
; 0000 00C4 
; 0000 00C5 // USART initialization
; 0000 00C6 // USART disabled
; 0000 00C7 UCSRB=0x00;
;PCODE: $0000091A VOL: 0
;PCODE: $0000091B VOL: 0
; 0000 00C8 
; 0000 00C9 // Analog Comparator initialization
; 0000 00CA // Analog Comparator: Off
; 0000 00CB // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00CC ACSR=0x80;
;PCODE: $0000091C VOL: 0
;PCODE: $0000091D VOL: 0
; 0000 00CD SFIOR=0x00;
;PCODE: $0000091E VOL: 0
;PCODE: $0000091F VOL: 0
; 0000 00CE 
; 0000 00CF // ADC initialization
; 0000 00D0 // ADC Clock frequency: 1000,000 kHz
; 0000 00D1 // ADC Voltage Reference: Int., cap. on AREF
; 0000 00D2 // ADC Auto Trigger Source: ADC Stopped
; 0000 00D3 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000920 VOL: 0
;PCODE: $00000921 VOL: 0
; 0000 00D4 ADCSRA=0x83;
;PCODE: $00000922 VOL: 0
;PCODE: $00000923 VOL: 0
; 0000 00D5 
; 0000 00D6 // SPI initialization
; 0000 00D7 // SPI disabled
; 0000 00D8 SPCR=0x00;
;PCODE: $00000924 VOL: 0
;PCODE: $00000925 VOL: 0
; 0000 00D9 
; 0000 00DA // TWI initialization
; 0000 00DB // TWI disabled
; 0000 00DC TWCR=0x00;
;PCODE: $00000926 VOL: 0
;PCODE: $00000927 VOL: 0
; 0000 00DD 
; 0000 00DE // 1 Wire Bus initialization
; 0000 00DF // 1 Wire Data port: PORTC
; 0000 00E0 // 1 Wire Data bit: 0
; 0000 00E1 // Note: 1 Wire port settings are specified in the
; 0000 00E2 // Project|Configure|C Compiler|Libraries|1 Wire menu.
; 0000 00E3 w1_init();
;PCODE: $00000928 VOL: 0
; 0000 00E4 //ds18b20_init();
; 0000 00E5 
; 0000 00E6 LcdInit();
;PCODE: $00000929 VOL: 0
; 0000 00E7 LcdContrast(35);
;PCODE: $0000092A VOL: 0
;PCODE: $0000092B VOL: 0
; 0000 00E8 tempDeviceInit();
;PCODE: $0000092C VOL: 0
; 0000 00E9 getTemperature(ds18b20_devices);
;PCODE: $0000092D VOL: 0
;PCODE: $0000092E VOL: 0
;PCODE: $0000092F VOL: 0
; 0000 00EA readADC(read_adc(0));
;PCODE: $00000930 VOL: 0
;PCODE: $00000931 VOL: 0
;PCODE: $00000932 VOL: 0
;PCODE: $00000933 VOL: 0
; 0000 00EB 
; 0000 00EC setTemplate(4);
;PCODE: $00000934 VOL: 0
;PCODE: $00000935 VOL: 0
;PCODE: $00000936 VOL: 0
; 0000 00ED 
; 0000 00EE // Global enable interrupts
; 0000 00EF #asm("sei")
;PCODE: $00000937 VOL: 0
	sei
;PCODE: $00000938 VOL: 0
; 0000 00F0 
; 0000 00F1 while (1)
;PCODE: $00000939 VOL: 0
; 0000 00F2       {
; 0000 00F3       // Place your code here
; 0000 00F4          buttonCtrl();
;PCODE: $0000093A VOL: 0
; 0000 00F5       }
;PCODE: $0000093B VOL: 0
;PCODE: $0000093C VOL: 0
; 0000 00F6 }
;PCODE: $0000093D VOL: 0
;PCODE: $0000093E VOL: 0
;PCODE: $0000093F VOL: 0
